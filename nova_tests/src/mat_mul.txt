#include <iostream>
using namespace std;

#include <nova_processing/nv.hpp>

template<
    typename In1, typename In2, typename Out,
    uint32_t P, uint32_t Q, uint32_t R
>
void nvMatrixMultiply(
    nv_mat<In1, P, Q> A, 
    nv_mat<In2, Q, R> B, 
    nv_mat<Out, P, R> C
){
    uint32_t i, j, k;
    Out sum;

    for(i = 0; i < P; i++){
        for(j = 0; j < R; j++){
            sum = 0;
            for(k = 0; k < Q; k++){
                sum += (Out) A[i*Q + k] * (Out) B[k*R + j];
            }
            C[i*R + j] = sum;
        }
    }
}

int main(){
    nv_mat<int32_t, 2, 2> mat1;
    nv_mat<int32_t, 2, 2> mat2;
    nv_mat<int32_t, 2, 2> mat3;

    mat1[0][0] = 1;
    mat1[0][1] = 2;
    mat1[1][0] = 3;
    mat1[1][1] = 4;

    mat2[0][0] = 1;
    mat2[0][1] = 2;
    mat2[1][0] = 3;
    mat2[1][1] = 4;

    mat3[0][0] = 1;
    mat3[0][1] = 2;
    mat3[1][0] = 3;
    mat3[1][1] = 4;

    nvMatrixMultiply<int32_t, int32_t, int32_t, 2, 2, 2>(mat1, mat2, mat3);

    printf("vals: %d %d %d %d \n", mat3[0][0], mat3[0][1], mat3[1][0], mat3[1][1]);

    return 0;


}